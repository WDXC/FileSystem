fuse_conn_info --------{{{
1. bb_init() 
fuse_conn_info {
    unsigned proto_major;
    unsigned proto_minor;
    unsigned max_write;
    unsigned max_read;
    unsigned max_readahead;
    unsigned capable;
    unsigned want;
    unsigned max_background;
    unsigned congestion_threshold;
    unsigned time_gran;
    unsigned reserved[22];
} 

proto_major:
    major version of the protocol
proto_minor: 
    minor version of the protocol
max_write:
    maximum size of the write buffer
max_read:
    maximum size of read request
    In common, its doesn't exist limit;
    the maximum size is limited by the kernel
max_readahead:
    maximum readahead 
capable:
    Capability flags that the kernel supported
want:
    Capability flags that filesystem wants to enable
max_background:
    Maximum number of pending 'background' requests
    After kernel 4.8, only two type fall into request category:
    1. Read-ahead requests
    2. asynchronous direct I/O requests
congestion_threshold
    Kernel congestion threshold parameter
    if pending requests exceeds this number, fuse kernel module will mark it
    congestion, these perform handled in sort, will change alogrithm
    application,such as change wait thread state to sleep thread
time_gran:
    if enable FUSE_CAP_WRITE_BACK_CACHE, will cause kernel and filesystem have
    different mtime and ctime
    for this reasonable, could use this to disable;
revered[22]:
    For future use

From log, we can know:
1. proto_major = 7              ==> major version of protocol is 7
2. proto_minor = 31             ==> minor version of protocaol is 31
3. max_write = 131072           ==> maximum size of the write buffer is 131072
4. max_readahead = 131072       ==> maximum sizeo of the readahead is 131072
5. capable = 00000ffb           ==> capability flags is 00000ffb
6. want = 00000010              ==> want flags enable (default disable)
                                    could set it that kernel >= 4.20
7. max_background = 0           ==> no background request
8. congrestion_threshold = 0    ==> filesystem is not in congestion state
}}}

fuse_context --------{{{

fuse_context {
    struct fuse* fuse;
    uid_t   uid;
    gid_t   gid;
    pid_t   pid;
    void*   private_data;
    mode_t  umask;
}

fuse:
    Pointer to the fuse object
uid:
    effective user id
gid:
    effective group id
pid:
    thread id 
private_data:
    set by file system on mount
umask:
    umask of the thread
    umask of the calling process
    umask is a command that determines the settings of
    a mask that controls how file permissions are set
    for newly created files
    e.g. chmod 777 file  777 is umask

fuse = 0460f770
uid = 0
gid = 0
pid = 0
private_data = 0460e2a0
umask = 00000

}}}


